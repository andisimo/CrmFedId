<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId Settings Flyout</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdSettingsFlyout</Shortcut>
    <Description>inserts windows runtime federated identity settings flyout snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[FedId.Instance.ShowSettingsFlyout += (sender1, e1) => {
        if (e1.FlyoutAction == FlyoutAction.GetIdpCredentials)
        {
            SettingsFlyout settings = new SettingsFlyout();  settings.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;
            settings.HeaderBrush = new SolidColorBrush(Colors.Blue);  settings.HeaderText = "identity provider credentials";
            settings.SmallLogoImageSource = new BitmapImage(new Uri("ms-appx:///Assets/SmallLogo.png"));
            settings.Content = new IdpCredentialsFlyout();  settings.IsOpen = true;
            Log.Instance.TraceInformation("idp credentials flyout being displayed");
        }
        else if (e1.FlyoutAction == FlyoutAction.GetIdpSelection)
        {
            SettingsFlyout settings = new SettingsFlyout(); settings.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;
            settings.HeaderBrush = new SolidColorBrush(Colors.Blue);  settings.HeaderText = "identity provider selection";
            settings.SmallLogoImageSource = new BitmapImage(new Uri("ms-appx:///Assets/SmallLogo.png"));
            settings.Content = new IdpSelectionFlyout(); settings.IsOpen = true;
            Log.Instance.TraceInformation("idp selection flyout being displayed");
        }
    };]]>
    </Code>
  </Snippet>
</CodeSnippet>
<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId SignIn</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdSignIn</Shortcut>
    <Description>inserts windows runtime federated identity signin snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[if (!FedId.Instance.IsSecurityTokenValid()) await FedId.Instance.SignInAsync("<wsfed acs or wsfed signin params>");]]>
    </Code>
  </Snippet>
</CodeSnippet>
<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId SignOut</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdSignOut</Shortcut>
    <Description>inserts windows runtime federated identity signout snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[if (FedId.Instance.IsSecurityTokenValid()) await FedId.Instance.SignOutAsync();]]>
    </Code>
  </Snippet>
</CodeSnippet>
<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId SignIn All Examples</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdSignInAllExamples</Shortcut>
    <Description>inserts windows runtime federated identity signin snippet containing all examples</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[if (FedId.Instance.IsSecurityTokenValid()) 
            {
await FedId.Instance.SignInAsync("https://mynamespace.accesscontrol.windows.net/v2/metadata/IdentityProviders.js?protocol=wsfederation&realm=https://myapp.cloudapp.net/&reply_to=https://myapp.cloudapp.net/&version=1.0");
//await FedId.Instance.SignInAsync("https://mynamespace.accesscontrol.windows.net/v2/metadata/IdentityProviders.js?protocol=wsfederation&realm=https://myonpremiseserviceaddress/&reply_to=https://mywabssobouncer.cloudapp.net/&version=1.0");
//await FedId.Instance.SignInAsync("https://myapp.microsoft.com/adfs/ls/?wa=wsignin1.0&wtrealm=https://myapp.cloudapp.net/");
            }
            if (!FedId.IsSecurityTokenRawTokenSbValid()) {
// wsfed acs-sb signin that stores swt result in .RawTokenSb
await FedId.Instance.SignInAsync("https://mynamespace-sb.accesscontrol.windows.net/v2/metadata/IdentityProviders.js?protocol=wsfederation&realm=http://mynamespace.servicebus.windows.net/&reply_to=https://mywabssobouncer.cloudapp.net/&version=1.0");
            }]]>
    </Code>
  </Snippet>
</CodeSnippet>
<!--<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId SignIn All Overload Examples</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdSignInAllOverloadExamples</Shortcut>
    <Description>inserts windows runtime federated identity signin snippet containing all overload examples</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[if (!FedId.Instance.IsSecurityTokenValid())
            {
//TimeSpan wsFedSessionTokenExpirationShrink = new TimeSpan(0, 0, 5);  // 5 seconds, default uses bootstrap token expiration
//FedId.Instance.SignIn("https://myapp.cloudapp.net/", wsFedSessionTokenExpirationShrink);  // wsfed signin to acquire saml or swt token for use calling wsfed secured azure web role content and service endpoints

//TimeSpan wsFedSessionTokenExpirationExpand = new TimeSpan(14, 0, 0, 0);  // 14 days, default uses bootstrap token expiration
//FedId.Instance.SignIn("https://myapp.cloudapp.net/", wsFedSessionTokenExpirationExpand);  // wsfed signin to acquire saml or swt token for use calling wsfed secured azure web role content and service endpoints
   
// for adfs wstrust enabled endpoints see https://<adfsfarm>/adfs/services/trust/mex
// for acs wstrust enabled endpoints see https://<namespace>[-sb].accesscontrol.windows.net/v2/wstrust/mex
            }
            else 
            {
FedId.Instance.SignOut(<replying party custom signout param>);
            } ]]>
    </Code>
  </Snippet>
</CodeSnippet>-->
<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId Name Claim Access</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdNameClaimAccess</Shortcut>
    <Description>inserts windows runtime federated identity name claim access snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[// requires adding "using System.Linq;" to enable extensions not found using intellisense resolve
string nameClaim = FedId.Instance.SecurityToken.Claims.Where(c => c.ClaimType == ClaimTypes.Name).Any() ? 
FedId.Instance.SecurityToken.Claims.Where(c => c.ClaimType == ClaimTypes.Name).Select(c => c.Value).First() : string.Empty;]]>
    </Code>
  </Snippet>
</CodeSnippet>
<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId Role Claims Access</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdRoleClaimsAccess</Shortcut>
    <Description>inserts windows runtime federated identity role claims access snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[// requires adding "using System.Linq;" to enable extensions not found using intellisense resolve
bool isInMemberRole = FedId.Instance.SecurityToken.Claims.Where(c => c.ClaimType == ClaimTypes.Role && c.Value == "My Members Role").Any();
List<string> roleClaims = FedId.Instance.SecurityToken.Claims.Where(c => c.ClaimType == ClaimTypes.Role).Select(c => c.Value).ToList();
var claimsCount = FedId.Instance.SecurityToken.Claims.Count;
int roleClaimsCount = roleClaims.Count;]]>
    </Code>
  </Snippet>
</CodeSnippet>  
<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId Session CookieHeader Attach</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdSessionCookieHeaderAttach</Shortcut>
    <Description>inserts windows runtime federated identity session cookie header attach snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[httpClientHandler.CookieContainer.SetCookies(new Uri(url), FedId.Instance.SecurityToken.SessionCookieHeader);]]>
    </Code>
  </Snippet>
</CodeSnippet>
<!--<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId Session CookieContainer Attach</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdSessionCookieContainerAttach</Shortcut>
    <Description>inserts windows runtime federated identity session cookie container attach snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[WebClientEx webClient = new WebClientEx();  // using nuget package provided WebClientEx() implementation in order to have access to underlying HttpWebRequest.CookieContainer
webClient.CookieContainer = FedId.Instance.SecurityToken.GetSessionCookieContainer(new Uri("https://mycompany.sharepoint.com/"));]]>
    </Code>
  </Snippet>
</CodeSnippet>-->
<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId Authorization Header Attach</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdAuthorizationHeaderAttach</Shortcut>
    <Description>inserts windows runtime federated identity authorization header attach snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("OAuth", FedId.Instance.SecurityToken.RawToken);]]>
    </Code>
  </Snippet>
</CodeSnippet>
<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId ServiceBusAuthorization Header Attach</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdServiceBusAuthorizationHeaderAttach</Shortcut>
    <Description>inserts windows runtime federated identity servicebus authorization header attach snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[httpClient.DefaultRequestHeaders.Add("ServiceBusAuthorization", "WRAP access_token=\"" + FedId.Instance.SecurityToken.RawTokenSb + "\"");
//httpClient.DefaultRequestHeaders.Add("ServiceBusAuthorization", "OAuth " + FedId.Instance.SecurityToken.RawTokenSb);]]>
    </Code>
  </Snippet>
</CodeSnippet>
<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId Soap Authorization Header Attach</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdSoapAuthorizationHeaderAttach</Shortcut>
    <Description>inserts windows runtime federated identity soap authorization header attach snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[using (new OperationContextScope(soapClient.InnerChannel))
{
    HttpRequestMessageProperty request = OperationContext.Current.OutgoingMessageProperties[HttpRequestMessageProperty.Name] as HttpRequestMessageProperty;
    request.Headers[HttpRequestHeader.Authorization] = string.Format("OAuth {0}", FedId.Instance.SecurityToken.RawToken);
    
    // ... now complete soapClient service endpoint request code implementation here
}]]>
    </Code>
  </Snippet>
</CodeSnippet>
<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId Soap ServiceBusAuthorization Header Attach</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdSoapServiceBusAuthorizationHeaderAttach</Shortcut>
    <Description>inserts windows runtime federated identity soap servicebus authorization header attach snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[using (new OperationContextScope(soapClient.InnerChannel))
{
    OperationContext.Current.OutgoingMessageHeaders.Add(new ServiceBusAuthorizationSoapHeader(FedId.Instance.SecurityToken.RawTokenSb));
    
    // ... now complete soapClient service endpoint request code implementation here
}]]>
    </Code>
  </Snippet>
</CodeSnippet>
<!--<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT FedId Soap WsTrust Secured Call</Title>
    <Author>author</Author>
    <Shortcut>wrtFedIdSoapWsTrustSecuredCall</Shortcut>
    <Description>inserts windows runtime federated identity soap wstrust secured call snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[SecureServiceHelper.MakeSecureServiceCall(() => { soapClient.GetDataAsync(operationParam1value); },
    FedId.Instance.SecurityToken.Rstr, soapClient.InnerChannel);]]>
    </Code>
  </Snippet>
</CodeSnippet>-->
<!--<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT Diagnostics Log Information</Title>
    <Author>author</Author>
    <Shortcut>wrtDiagLogInformation</Shortcut>
    <Description>inserts windows runtime diagnostics log exception snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[Log.Instance.TraceInformation("some variable currently = {0}", someVariable);]]>
    </Code>
  </Snippet>
</CodeSnippet>-->
<!--<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT Diagnostics Log Exception</Title>
    <Author>author</Author>
    <Shortcut>wrtDiagLogException</Shortcut>
    <Description>inserts windows runtime diagnostics log exception snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[Log.Instance.TraceException(e.ExceptionObject, "An Application_UnhandledException event occurred.");]]>
    </Code>
  </Snippet>
</CodeSnippet>-->
<!--<CodeSnippet Format="1.0.0">
  <Header>
    <Title>WinRT Diagnostics Log Check</Title>
    <Author>author</Author>
    <Shortcut>wrtDiagLogCheck</Shortcut>
    <Description>inserts windows runtime diagnostics log check snippet</Description>
    <SnippetTypes>
      <SnippetType>SurroundsWith</SnippetType>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
<![CDATA[if (Log.Instance.CheckForLogFileAndAskUserToForward("myAppSupport@company.com", "an unhandled exception was found and forwarded by user"))
            {
                // TODO: any additional logic if previous unhandled exception details were found and forwarded via email 
            }]]>
    </Code>
  </Snippet>
</CodeSnippet>-->
</CodeSnippets>